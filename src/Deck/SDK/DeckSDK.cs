//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Deck.SDK
{
    using Deck.SDK.Hooks;
    using Deck.SDK.Models.Components;
    using Deck.SDK.Models.Errors;
    using Deck.SDK.Utils;
    using Deck.SDK.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;

    /// <summary>
    /// Deck API: # Deck API makes it straightforward for users to connect to any portal securely and quickly.<br/>
    /// 
    /// <remarks>
    /// <br/>
    /// ### Welcome! Looking for a quick introduction to our API? Check out the ðŸš€<a href="https://framework.docs.deck.co/docs/setup">Quickstart guide</a>.<br/>
    /// <br/>
    /// Starting on the sandbox server is easy:<br/>
    /// <br/>
    /// 1. Create an account using the <a href="https://dashboard.deck.co">dashboard</a> to get your client id and sandbox secret<br/>
    /// 2. Enter your client id and sandbox secret in the Authentication section below<br/>
    /// 3. Hit the &quot;Try&quot; buttons below for each endpoint.<br/>
    /// <br/>
    /// Happy querying!
    /// </remarks>
    /// </summary>
    public interface IDeckSDK
    {

        /// <summary>
        /// Endpoints related to jobs.
        /// </summary>
        public IJobs Jobs { get; }
        public IJobsDocuments JobsDocuments { get; }

        /// <summary>
        /// These endpoints are used by the Link widget. They can also be used for creating your own UX experience and connecting data from utility data sources.
        /// </summary>
        public ILink Link { get; }
        public ILinks Links { get; }

        /// <summary>
        /// Manage connections
        /// </summary>
        public IConnection Connection { get; }
        public IConnections Connections { get; }
    }


    /// <summary>
    /// Deck API: # Deck API makes it straightforward for users to connect to any portal securely and quickly.<br/>
    /// 
    /// <remarks>
    /// <br/>
    /// ### Welcome! Looking for a quick introduction to our API? Check out the ðŸš€<a href="https://framework.docs.deck.co/docs/setup">Quickstart guide</a>.<br/>
    /// <br/>
    /// Starting on the sandbox server is easy:<br/>
    /// <br/>
    /// 1. Create an account using the <a href="https://dashboard.deck.co">dashboard</a> to get your client id and sandbox secret<br/>
    /// 2. Enter your client id and sandbox secret in the Authentication section below<br/>
    /// 3. Hit the &quot;Try&quot; buttons below for each endpoint.<br/>
    /// <br/>
    /// Happy querying!
    /// </remarks>
    /// </summary>
    public class DeckSDK: IDeckSDK
    {
        public SDKConfig SDKConfiguration { get; private set; }

        private const string _language = "csharp";
        private const string _sdkVersion = "0.0.2";
        private const string _sdkGenVersion = "2.667.0";
        private const string _openapiDocVersion = "v1";
        public IJobs Jobs { get; private set; }
        public IJobsDocuments JobsDocuments { get; private set; }
        public ILink Link { get; private set; }
        public ILinks Links { get; private set; }
        public IConnection Connection { get; private set; }
        public IConnections Connections { get; private set; }

        public DeckSDK(SDKConfig config)
        {
            SDKConfiguration = config;
            InitHooks();

            Jobs = new Jobs(SDKConfiguration);

            JobsDocuments = new JobsDocuments(SDKConfiguration);

            Link = new Link(SDKConfiguration);

            Links = new Links(SDKConfiguration);

            Connection = new Connection(SDKConfiguration);

            Connections = new Connections(SDKConfiguration);
        }

        public DeckSDK(Deck.SDK.Models.Components.Security? security = null, Func<Deck.SDK.Models.Components.Security>? securitySource = null, int? serverIndex = null, string? serverUrl = null, Dictionary<string, string>? urlParams = null, ISpeakeasyHttpClient? client = null, RetryConfig? retryConfig = null)
        {
            if (serverIndex != null)
            {
                if (serverIndex.Value < 0 || serverIndex.Value >= SDKConfig.ServerList.Length)
                {
                    throw new Exception($"Invalid server index {serverIndex.Value}");
                }
            }

            if (serverUrl != null)
            {
                if (urlParams != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, urlParams);
                }
            }
            Func<Deck.SDK.Models.Components.Security>? _securitySource = null;

            if(securitySource != null)
            {
                _securitySource = securitySource;
            }
            else if(security != null)
            {
                _securitySource = () => security;
            }
            else
            {
                throw new Exception("security and securitySource cannot both be null");
            }

            SDKConfiguration = new SDKConfig(client)
            {
                ServerIndex = serverIndex == null ? 0 : serverIndex.Value,
                ServerUrl = serverUrl == null ? "" : serverUrl,
                SecuritySource = _securitySource,
                RetryConfig = retryConfig
            };

            InitHooks();

            Jobs = new Jobs(SDKConfiguration);

            JobsDocuments = new JobsDocuments(SDKConfiguration);

            Link = new Link(SDKConfiguration);

            Links = new Links(SDKConfiguration);

            Connection = new Connection(SDKConfiguration);

            Connections = new Connections(SDKConfiguration);
        }

        private void InitHooks()
        {
            SDKConfiguration = SDKConfiguration.Hooks.SDKInit(SDKConfiguration);
        }

        public class SDKBuilder
        {
            private SDKConfig _sdkConfig = new SDKConfig(client: new SpeakeasyHttpClient());

            public SDKBuilder() { }

            public SDKBuilder WithServerIndex(int serverIndex)
            {
                if (serverIndex < 0 || serverIndex >= SDKConfig.ServerList.Length)
                {
                    throw new Exception($"Invalid server index {serverIndex}");
                }
                _sdkConfig.ServerIndex = serverIndex;
                return this;
            }

            public SDKBuilder WithServerUrl(string serverUrl, Dictionary<string, string>? serverVariables = null)
            {
                if (serverVariables != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, serverVariables);
                }
                _sdkConfig.ServerUrl = serverUrl;
                return this;
            }

            public SDKBuilder WithSecuritySource(Func<Deck.SDK.Models.Components.Security> securitySource)
            {
                _sdkConfig.SecuritySource = securitySource;
                return this;
            }

            public SDKBuilder WithSecurity(Deck.SDK.Models.Components.Security security)
            {
                _sdkConfig.SecuritySource = () => security;
                return this;
            }

            public SDKBuilder WithClient(ISpeakeasyHttpClient client)
            {
                _sdkConfig.Client = client;
                return this;
            }

            public SDKBuilder WithRetryConfig(RetryConfig retryConfig)
            {
                _sdkConfig.RetryConfig = retryConfig;
                return this;
            }

            public DeckSDK Build()
            {
              if (_sdkConfig.SecuritySource == null) {
                  throw new Exception("securitySource cannot be null. One of `Security` or `securitySource` needs to be defined.");
              }
              return new DeckSDK(_sdkConfig);
            }

        }

        public static SDKBuilder Builder() => new SDKBuilder();
    }
}