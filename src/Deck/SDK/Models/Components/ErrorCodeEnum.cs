//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Deck.SDK.Models.Components
{
    using Deck.SDK.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum ErrorCodeEnum
    {
        [JsonProperty("DATA_SOURCE_NOT_FOUND")]
        DataSourceNotFound,
        [JsonProperty("DATA_SOURCE_NOT_RESPONDING")]
        DataSourceNotResponding,
        [JsonProperty("PRODUCT_NOT_READY")]
        ProductNotReady,
        [JsonProperty("CONNECTION_NOT_FOUND")]
        ConnectionNotFound,
        [JsonProperty("CONNECTION_FAILED")]
        ConnectionFailed,
        [JsonProperty("INVALID_CREDENTIALS")]
        InvalidCredentials,
        [JsonProperty("LIVE_CONNECTIVITY_NOT_ENABLED")]
        LiveConnectivityNotEnabled,
        [JsonProperty("PRODUCT_NOT_ENABLED")]
        ProductNotEnabled,
        [JsonProperty("NO_ACCOUNTS")]
        NoAccounts,
        [JsonProperty("NO_STATEMENTS")]
        NoStatements,
        [JsonProperty("CONNECTION_LOCKED")]
        ConnectionLocked,
        [JsonProperty("BLOCKED_BY_PIN")]
        BlockedByPin,
        [JsonProperty("VALIDATION_FAILED")]
        ValidationFailed,
        [JsonProperty("INVALID_API_KEYS")]
        InvalidApiKeys,
        [JsonProperty("INVALID_LINK_TOKEN")]
        InvalidLinkToken,
        [JsonProperty("INVALID_PUBLIC_TOKEN")]
        InvalidPublicToken,
        [JsonProperty("INVALID_ACCESS_TOKEN")]
        InvalidAccessToken,
        [JsonProperty("INVALID_ACCOUNT_ID")]
        InvalidAccountId,
        [JsonProperty("INVALID_STATEMENT_ID")]
        InvalidStatementId,
        [JsonProperty("CONSENT_REQUIRED")]
        ConsentRequired,
        [JsonProperty("INVALID_CURP")]
        InvalidCurp,
        [JsonProperty("INVALID_DOCUMENT_UPLOAD")]
        InvalidDocumentUpload,
        [JsonProperty("INVALID_ARGUMENT")]
        InvalidArgument,
        [JsonProperty("NOT_SUPPORTED")]
        NotSupported,
        [JsonProperty("UNEXPECTED_ERROR")]
        UnexpectedError,
        [JsonProperty("PLANNED_MAINTENANCE")]
        PlannedMaintenance,
        [JsonProperty("SECURITY_QUESTION_NOT_FOUND")]
        SecurityQuestionNotFound,
        [JsonProperty("SECURITY_CAPTCHA_NOT_FOUND")]
        SecurityCaptchaNotFound,
        [JsonProperty("RATE_LIMIT_EXCEEDED")]
        RateLimitExceeded,
        [JsonProperty("NO_ACTIVE_CONNECTION")]
        NoActiveConnection,
        [JsonProperty("INVALID_SOURCE")]
        InvalidSource,
        [JsonProperty("ACTIVE_CONNECTION_EXISTS")]
        ActiveConnectionExists,
    }

    public static class ErrorCodeEnumExtension
    {
        public static string Value(this ErrorCodeEnum value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static ErrorCodeEnum ToEnum(this string value)
        {
            foreach(var field in typeof(ErrorCodeEnum).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is ErrorCodeEnum)
                    {
                        return (ErrorCodeEnum)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum ErrorCodeEnum");
        }
    }

}