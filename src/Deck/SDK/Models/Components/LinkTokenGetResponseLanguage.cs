//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Deck.SDK.Models.Components
{
    using Deck.SDK.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// The language used for the Link session corresponding to the provided Link token
    /// </summary>
    public enum LinkTokenGetResponseLanguage
    {
        [JsonProperty("EN")]
        En,
        [JsonProperty("ES")]
        Es,
        [JsonProperty("FR")]
        Fr,
        [JsonProperty("DE")]
        De,
        [JsonProperty("IT")]
        It,
        [JsonProperty("PT")]
        Pt,
        [JsonProperty("NL")]
        Nl,
        [JsonProperty("PL")]
        Pl,
        [JsonProperty("SV")]
        Sv,
        [JsonProperty("DA")]
        Da,
        [JsonProperty("NO")]
        No,
        [JsonProperty("ET")]
        Et,
        [JsonProperty("LT")]
        Lt,
        [JsonProperty("LV")]
        Lv,
        [JsonProperty("RO")]
        Ro,
    }

    public static class LinkTokenGetResponseLanguageExtension
    {
        public static string Value(this LinkTokenGetResponseLanguage value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static LinkTokenGetResponseLanguage ToEnum(this string value)
        {
            foreach(var field in typeof(LinkTokenGetResponseLanguage).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is LinkTokenGetResponseLanguage)
                    {
                        return (LinkTokenGetResponseLanguage)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum LinkTokenGetResponseLanguage");
        }
    }

}